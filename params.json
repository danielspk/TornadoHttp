{
  "name": "Tornadohttp",
  "tagline": "Middleware Container PSR-7 ",
  "body": "TORNADO HTTP\r\n============\r\n\r\n[![Build Status](https://travis-ci.org/danielspk/TornadoHttp.svg)](https://travis-ci.org/danielspk/TornadoHttp)\r\n[![Coverage Status](https://coveralls.io/repos/github/danielspk/TornadoHttp/badge.svg?branch=master)](https://coveralls.io/github/danielspk/TornadoHttp?branch=master)\r\n[![Latest Stable Version](https://poser.pugx.org/danielspk/TornadoHttp/v/stable.svg)](https://packagist.org/packages/danielspk/TornadoHttp)\r\n[![Total Downloads](https://poser.pugx.org/danielspk/TornadoHttp/downloads.svg)](https://packagist.org/packages/danielspk/TornadoHttp)\r\n[![License](https://poser.pugx.org/danielspk/TornadoHttp/license.svg)](https://packagist.org/packages/danielspk/TornadoHttp)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/3d14197b-406f-4a2d-acae-8372104870a0/mini.png)](https://insight.sensiolabs.com/projects/3d14197b-406f-4a2d-acae-8372104870a0)\r\n\r\n![ScreenShot](http://daniel-spiridione.com.ar/images/proyectos/tornado-php.png)\r\n\r\nTORNADO HTTP es un contenedor middleware PSR-7\r\n\r\n## Documentación:\r\n\r\nLa siguiente documentación le enseñará el uso de Tornado Http. Si lo desea puede descargar una aplicación esqueleto de\r\nejemplo que le mostrará como puede crear sus propios middlewares y utilizar paquetes de terceros como Doctrine y Twig:\r\n\r\nhttps://github.com/danielspk/TornadoHttpSkeletonApplication\r\n\r\n### Instalación:\r\n\r\nSe recomienda instalar esta librería mediante el uso de Composer de la siguiente forma:\r\n\r\n```\r\n    php composer.phar require danielspk/tornadohttp:~1.0\r\n```\r\n\r\nEsto instalará Tornado HTTP y creará o actualizará el archivo `composer.json` con la siguiente dependencia:\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"danielspk/tornadohttp\": \"~1.0\"\r\n    }\r\n}\r\n```\r\n\r\n### Crear el contenedor de aplicación:\r\n\r\nTornado Http puede construirse de varias formas:\r\n\r\n#### Sin parámetros:\r\n\r\n```php\r\n    $app = new \\DMS\\TornadoHttp\\TornadoHttp();\r\n```\r\n\r\n#### Con una lista de Middlewares\r\n\r\n```php\r\n    $app = new \\DMS\\TornadoHttp\\TornadoHttp([\r\n        ['middleware' => (new MiddlewareClass)],\r\n        ['middleware' => $middlewareOne],\r\n        ['middleware' => 'ServiceMiddlewareTwo'],\r\n        ['middleware' => 'App\\MiddlewareThree', 'path' => '/admin'],\r\n        ['middleware' => ['App\\MiddlewareFour', [$paramOne, $paramTwo]]]\r\n    ]);\r\n```\r\n\r\nNota: Puede ver que hay cinco formas de registrar un Middleware: object, callable, string referencia a servicio, string\r\ncon namespace de clase y array. Más adelante se explicará en detalle cada una de estas formas.\r\n\r\n#### Con un Contenedor de Servicios\r\n\r\n```php\r\n    $app = new DMS\\TornadoHttp\\TornadoHttp(\r\n        [],\r\n        new Container()\r\n    );\r\n```\r\n\r\nNota: El contenedor de servicios a utilizar debe implementar la interface `Container Interop`. Puede obtener más\r\ninformación al respecto en el siguiente [link](https://github.com/container-interop/container-interop).\r\n\r\n#### Con un Resolver de Middleware\r\n\r\nPendiente de documentar...\r\n\r\n#### Con un Entorno de Ejecución\r\n\r\nPendiente de documentar...\r\n\r\n### Cola de Middlewares:\r\n\r\nTornado Http permite registrar middlewares de 3 formas distintas:\r\n* mediante su `constructor`\r\n* mediante el método `add()`\r\n* mediante el método `addList()`\r\n\r\n**Ejemplos:**\r\n\r\nPendiente de documentar...\r\n\r\nTornado Http dispone de una clase propia que resuelve automáticamente como ejecutar un middleware registrado.\r\n\r\nExisten cinco formas de registrar middlewares en Tornado Http:\r\n* mediante una `instancia de clase`\r\n* mediante un `callable`\r\n* mediante un `string` que hace referencia a un `servicio` contenido en el Contenedor de Servicios\r\n* mediante un `string` que hace referencia a una `clase`\r\n* mediante un `array`\r\n\r\n**Ejemplos:**\r\n\r\nPendiente de documentar...\r\n\r\nCada middleware puede ser registrado con los siguientes filtros de ejecución:\r\n* Métodos HTTP permitidos\r\n* Path URL\r\n* Entornos de ejecución permitidos\r\n\r\n**Ejemplos:**\r\n\r\nPendiente de documentar...\r\n\r\n### Container Trait:\r\n\r\nTornado Http facilita un trait que puede ser utilizado dentro de sus propios middlewares.\r\n\r\nCuando Tornado Http detecta que un middleware utiliza `Container\\ContainerTrait` inyecta automáticamente el contenedor\r\nde servicios registrado en Tornado Http.\r\n\r\nSe podrá acceder al contenedor de servicios, dentro del middleware, de la siguiente forma:\r\n\r\n```php\r\n    class ExampleMiddleware\r\n    {\r\n        use \\DMS\\TornadoHttp\\Container\\ContainerTrait;\r\n\r\n        public function getViewEngine()\r\n        {\r\n            return $this->container->get('view_engine');\r\n        }\r\n    }\r\n```\r\n\r\n### Inject Container Interface:\r\n\r\nPendiente de documentar...\r\n\r\n### Middleware Abstracto:\r\n\r\nPendiente de documentar...\r\n\r\n### Middleware Resolver:\r\n\r\nPendiente de documentar...\r\n\r\n### Resumen de Interfaces/Traits/Clases y Métodos:\r\n\r\n**DMS\\TornadoHttp\\TornadoHttp**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| __construct(array = [], ContainerInterface = null, ResolverInterface = null, string = 'dev') | Crea una instancia de Tornado Http |\r\n| __invoke(RequestInterface, ResponseInterface) | Invocación |\r\n| add(callable&#124;object&#124;string&#124;array, string = null, array = null, array = null, int = null) | Agrega un Middleware a la cola |\r\n| addList(array) | Agrega una lista de Middlewares a la cola |\r\n| getMiddlewareIndex() | Devuelve el índice actual de la cola de Middlewares |\r\n| setDI(ContainerInterface) | Asigna un contenedor de servicios |\r\n| getDI() | Recupera el contenedor de servicios asignado |\r\n| setResolver(ResolverInterface) | Asigna un resolver de middlewares |\r\n| setEnvironment(string) | Asigna el entorno de ejecución |\r\n| resolveMiddleware(callable&#124;string&#124;array) | Resuelve y ejecuta un Middleware |\r\n\r\n**DMS\\TornadoHttp\\Container\\ContainerTrait**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| setContainer(ContainerInterface) | Asigna un contenedor de servicios |\r\n| getContainer() | Recupera el contenedor de servicios asignado |\r\n\r\n**DMS\\TornadoHttp\\Container\\InjectContainerInterface**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| setContainer(ContainerInterface) | Asigna un contenedor de servicios |\r\n| getContainer() | Recupera el contenedor de servicios asignado |\r\n\r\n**DMS\\TornadoHttp\\Middleware\\Middleware**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| setContainer(ContainerInterface) | Asigna un contenedor de servicios |\r\n| getContainer() | Recupera el contenedor de servicios asignado |\r\n\r\n**DMS\\TornadoHttp\\Middleware\\MiddlewareInterface**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| __invoke(RequestInterface, ResponseInterface) | Invocación |\r\n\r\n**DMS\\TornadoHttp\\Resolver\\Resolver**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| __construct(ContainerInterface = null) | Crea una instancia del resolver |\r\n| solve(callable&#124;object&#124;string&#124;array) | Resuelve un middleware |\r\n\r\n**DMS\\TornadoHttp\\Resolver\\ResolverInterface**\r\n\r\n| Método | Detalle |\r\n| ------ | ------- |\r\n| solve(callable&#124;object&#124;string&#124;array) | Resuelve un middleware |\r\n\r\n## Inspiracion:\r\n\r\n- [Relay](http://relayphp.com/)\r\n- [Zend Stratigility](https://github.com/zendframework/zend-stratigility)\r\n\r\n## Licencia:\r\n\r\nEl proyecto se distribuye bajo la licencia MIT.\r\n\r\n## Sugerencias y colaboración:\r\n\r\nEmail: info@daniel.spiridione.com.ar\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}